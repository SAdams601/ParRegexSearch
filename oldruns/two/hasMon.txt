==========================
Package: hackage/package/york-lava-0.2
[The type {OccName: JList}
Does not define a applicative instance.
Has a monad instance:


instance Monad JList where
  return a = One a
  Zero >>= f = Zero
  One a >>= f = f a
  (as :+: bs) >>= f = (as >>= f) :+: (bs >>= f)
]==========================
Package: hackage/package/mzv-0.1.0.2
[The type {OccName: Identity}
Does not define a applicative instance.
Has a monad instance:


instance Monad Identity where
    return a = Identity a
    m >>= k  = k (runIdentity m)
]==========================
Package: hackage/package/DSTM-0.1.2
[The type {OccName: STM}
Does not define a applicative instance.
Has a monad instance:


instance Monad STM where
  -- (>>=) :: STM a -> (a -> STM b) -> STM b
  (STM tr1)  >>= k = STM (\state -> do
                          stmRes <- tr1 state
                          case stmRes of
                            Success newState v ->
                               let (STM tr2) = k v in
                                 tr2 newState
                            Retry newState -> return (Retry newState)
                            Exception newState e -> return (Exception newState e)
                       )
  -- return :: a -> STM a
  return x      = STM (\state -> return (Success state x))
]==========================
Package: hackage/package/Cabal-1.8.0.6
[The type {OccName: ParseResult}
Does not define a applicative instance.
Has a monad instance:


instance Monad ParseResult where
        return x = ParseOk [] x
        ParseFailed err >>= _ = ParseFailed err
        ParseOk ws x >>= f = case f x of
                               ParseFailed err -> ParseFailed err
                               ParseOk ws' x' -> ParseOk (ws'++ws) x'
        fail s = ParseFailed (FromString s Nothing)
]==========================
Package: hackage/package/bindings-bfd-1.2.0.0
[The type {OccName: HappyIdentity}
Does not define a applicative instance.
Has a monad instance:


instance Monad HappyIdentity where
    return = HappyIdentity
    (HappyIdentity p) >>= q = q p
]==========================
Package: hackage/package/cao-0.1.1
[The type {OccName: CaoResult}
Does not define a applicative instance.
Has a monad instance:


instance Monad CaoResult  where
    return !x = CaoResult $! \ st -> return (Right (x, mempty), st)
    (>>=)     = bindTcMonad
]==========================
Package: hackage/package/transactional-events-0.1.0.0
[The type {OccName: CHS}
Does not define a applicative instance.
Has a monad instance:
 -- blocks until var is written

instance Monad CHS where
    return = CHS . return
    fail _ = CHS (prompt Fail)
    m >>= f = CHS $ runCHS m >>= runCHS . f
]==========================
Package: hackage/package/Coadjute-0.1.1
[The type {OccName: Coadjute}
Does not define a applicative instance.
Has a monad instance:


instance Monad Coadjute where
   return        = Co . return
   (Co rs) >>= f = Co (rs >>= unCo.f)
]==========================
Package: hackage/package/maude-0.6.1
[The type {OccName: Parser}
Does not define a applicative instance.
Has a monad instance:


instance Monad Parser where
    return = Ok
    ParseError e s >>= _ = ParseError e s
    Ok r >>= k = k r
]==========================
Package: hackage/package/Monatron-0.3.1
[The type {OccName: Id}
Does not define a applicative instance.
Has a monad instance:


instance Monad Id where
    return  = Id
    fail    = error
    m >>= f = f (runId m)
,The type {OccName: Lift}
Does not define a applicative instance.
Has a monad instance:


instance Monad Lift where
  return x  = L x
  fail x    = error x
  L x >>= k = k x
]==========================
Package: hackage/package/cpsa-3.3.2
[The type {OccName: EitherS}
Does not define a applicative instance.
Has a monad instance:


instance Monad EitherS where
    return = RightS
    LeftS l >>= _ = LeftS l
    RightS r >>= k = k r
    fail s = LeftS s
,The type {OccName: ReturnFail}
Does not define a applicative instance.
Has a monad instance:


instance Monad ReturnFail where
    return = Return
    Fail l >>= _ = Fail l
    Return r >>= k = k r
    fail s = Fail s
]==========================
Package: hackage/package/ixmonad-0.57
[The type {OccName: m}
Does not define a applicative instance.
Has a monad instance:


instance (P.Monad m) => Effect (Monad m) where
    {-| Trivial singleton monoid -}
    type Inv (Monad m) s t    = ()
    type Unit (Monad m)       = ()
    type Plus (Monad m) s t   = ()

    return x = Wrap (P.return x)
    (Wrap x) >>= f = Wrap ((P.>>=) x (unWrap . f))
]==========================
Package: hackage/package/effect-monad-0.6.1
[The type {OccName: m}
Does not define a applicative instance.
Has a monad instance:


instance (P.Monad m) => Effect (Monad m) where
    {-| Trivial singleton monoid -}
    type Inv (Monad m) s t    = ()
    type Unit (Monad m)       = ()
    type Plus (Monad m) s t   = ()

    return x = Wrap (P.return x)
    (Wrap x) >>= f = Wrap ((P.>>=) x (unWrap . f))
]==========================
Package: hackage/package/llvm-pretty-bc-parser-0.2.1.0
[The type {OccName: Parse}
Does not define a applicative instance.
Has a monad instance:


instance Monad Parse where
  {-# INLINE return #-}
  return  = Parse . return

  {-# INLINE (>>=) #-}
  Parse m >>= f = Parse (m >>= unParse . f)

  {-# INLINE fail #-}
  fail = failWithContext
]==========================
Package: hackage/package/scion-0.1.0.2
[The type {OccName: Pa}
Does not define a applicative instance.
Has a monad instance:

instance Monad Pa where
  return x = Pa $ \_ -> Right x
  m >>= k = Pa $ \req ->
            case unPa m req of
              Left err -> Left err
              Right a -> unPa (k a) req
  fail msg = Pa $ \_ -> Left msg
]==========================
Package: hackage/package/sifflet-lib-2.2.1
[The type {OccName: EvalRes}
Does not define a applicative instance.
Has a monad instance:


instance Monad EvalRes where
  EvalOk value >>= f = f value
  EvalError e >>= _f = EvalError e
  EvalUntried >>= _f = EvalUntried
  return = EvalOk
  fail = EvalError
,The type {OccName: SuccFail}
Does not define a applicative instance.
Has a monad instance:


instance Monad SuccFail where
  Succ val >>= f = f val
  Fail err >>= _f = Fail err
  return = Succ
  fail = Fail
]==========================
